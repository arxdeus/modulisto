name: Release to pub.dev
on:
  workflow_dispatch:
    inputs:
      package-name:
        description: Which package to publish
        required: true
      package-version:
        required: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      flutter-matrix: ${{ steps.flutter-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Get Flutter SDK version constraints and packages
        id: flutter-matrix
        # Extract the lower bound from pubspec.yaml and the upper bound from .fvmrc
        run: |
          {
            echo 'matrix<<EOF'
            jq -cn  --argjson flutter-version "[\"$(cat .fvmrc | jq -r .flutter)\"]" '$ARGS.named'
            echo EOF
          } >> "$GITHUB_OUTPUT"
      - name: Print output values
        run: |
          echo "matrix=${{ steps.flutter-matrix.outputs.matrix }}"
  publish:
    name: "Publish (${{ inputs.package-name }}, ${{ inputs.package-version }})"
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.flutter-matrix) }}
    steps:
    - name: "Checkout repository"
      uses: actions/checkout@v4
      with:
        fetch-tags: true
        fetch-depth: 0

    - name: "Setup (Flutter ${{ matrix.flutter-version }})"
      uses: arxdeus/github_workflows/actions/flutter_setup@main
      with:
        flutter-version: ${{ matrix.flutter-version }}

    - name: "Run Dry Publish"
      shell: bash
      run: |
        IFS=-v read -r PACKAGE_NAME PACKAGE_VERSION <<< ${{ github.ref_name }}
        cd packages/${PACKAGE_NAME} && flutter pub publish --dry-run

    - name: Setup OIDC token
      uses: dart-lang/setup-dart@v1

    - name: "Run Publish"
      shell: bash
      run: |
        flutter pub publish --force
