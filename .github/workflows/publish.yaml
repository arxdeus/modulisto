name: Publish
permissions:
  contents: write
on:
  push:
    tags:
      - '*-v[0-9]+.[0-9]+.[0-9]+'


jobs:
  setup:
      runs-on: ubuntu-latest
      permissions:
        pull-requests: read
      outputs:
        flutter-version: ${{ steps.flutter-version.outputs.version }}
      steps:
        - name: ðŸ“¦ Get the .github actions
          uses: actions/checkout@v4
          with:
            sparse-checkout: |
              .github
        - name: Get Flutter SDK version
          id: flutter-version
          run: |
            sdk_constraint=$(cat pubspec.yaml | yq .environment.flutter)
            version=$(cat .fvmrc | jq -r .flutter)
            echo "version=$version" >> "$GITHUB_OUTPUT"
  publish:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flutter-version:
          - ${{ needs.setup.outputs.flutter-version }}
    permissions:
      id-token: write
      contents: write
    steps:
      - name: ðŸ“¦ Checkout
        uses: actions/checkout@v4

      - name: ðŸš‚ Setup Flutter and dependencies
        uses: ./.github/actions/setup
        with:
          flutter-version: ${{ matrix.flutter-version }}

      - name: Setup OIDC token
        uses: dart-lang/setup-dart@v1

      - name: Parse meta from tag
        env:
          BRANCH: ${{ github.ref_name }}
        id: split
        run: |
          echo "package_version=${BRANCH##*-v}" >> $GITHUB_OUTPUT
          echo "package_name=${BRANCH%%-*}" >> $GITHUB_OUTPUT
          echo "pretty_package_name=${package_name^}" >> $GITHUB_OUTPUT

      - name: Check if release exists
        id: check_release
        run: |
          RELEASE=$(gh release view ${{ steps.split.outputs.package_name }}-v${{ steps.split.outputs.package_version }} --json tagName -q .tagName || echo "not_found")
          if [[ "$RELEASE" == "not_found" ]]; then
            echo "CREATE_RELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "CREATE_RELEASE=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ðŸ”¢ Set up version from tags
        id: set-version
        if: startsWith(github.ref, 'refs/tags')
        shell: bash
        run: |
          sed -i "s/^version:.*/version: ${{ steps.split.outputs.package_version }}/" packages/${{ steps.split.outputs.package_name }}/pubspec.yaml
          ls -d packages/* | xargs -I{} sed -i "s/^  ${{ steps.split.outputs.package_name }}: ^.*/  ${{ steps.split.outputs.package_name }}: ^${{ steps.split.outputs.package_version }}/" {}/pubspec.yaml
          echo "Version set to ${{ steps.split.outputs.package_version }}"

      - name: Commit version update
        run: |
          git config --global user.name 'Github Actions'
          git config --global user.email 'github@arxdeus.dev'
          git commit -am "release(${{ steps.split.outputs.package_name }}): v${{ steps.split.outputs.package_version }}"
          git push origin HEAD:main

      - name: Create GitHub Release
        if: steps.check_release.outputs.CREATE_RELEASE == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.split.outputs.pretty_package_name }} - v${{ steps.split.outputs.package_version }}
          body: "Automated release for ${{ steps.split.outputs.pretty_package_name }}: version ${{ steps.split.outputs.package_version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to pub.dev
        run: cd packages/${{ steps.split.outputs.package_name }} && flutter pub publish --force
